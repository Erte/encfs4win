diff -ru encfs-1.5.orig/configure.ac encfs-1.5/configure.ac
--- encfs-1.5.orig/configure.ac	2008-09-10 07:54:33.000000000 +0200
+++ encfs-1.5/configure.ac	2010-12-13 14:56:19.349373815 +0100
@@ -72,26 +72,6 @@
 
 AC_SUBST(FUSE_LIBS)
 
-# check for a supported FUSE_MAJOR_VERSION.
-AC_MSG_CHECKING([For supported FUSE API version])
-AC_RUN_IFELSE([ 
-    AC_LANG_PROGRAM([[#include "fuse.h"]],
-[[
-    if(FUSE_MAJOR_VERSION == 2 && FUSE_MINOR_VERSION >= 5)
-    {
-	return 0;
-    } else
-	return -1;
-]])], 
-    [AC_MSG_RESULT([yes])],
-    [AC_MSG_RESULT([no])
-    AC_MSG_FAILURE([
-Encfs 1.3 requires FUSE 2.5 or newer.  Please check config.log for errors.  If
-you cannot determine the problem, mail encfs-users@lists.sourceforge.net
-and include the config.log file])
-    ]
-)
-
 dnl fuse_operations.setxattr was added 2004-03-31
 dnl only enable it if setxattr function is found..
 AC_CHECK_HEADERS([attr/xattr.h sys/xattr.h])
diff -ru encfs-1.5.orig/encfs/BlockNameIO.cpp encfs-1.5/encfs/BlockNameIO.cpp
--- encfs-1.5.orig/encfs/BlockNameIO.cpp	2008-08-06 08:35:05.000000000 +0200
+++ encfs-1.5/encfs/BlockNameIO.cpp	2010-12-08 21:12:10.968202002 +0100
@@ -87,6 +87,7 @@
 {
 }
 
+#undef interface
 Interface BlockNameIO::interface() const
 {
     return CurrentInterface();
@@ -155,7 +156,7 @@
 
     // don't bother trying to decode files which are too small
     if(decodedStreamLen < _bs)
-	throw ERROR("Filename too small to decode");
+	throw RLOG_ERROR("Filename too small to decode");
 
     BUFFER_INIT( tmpBuf, 32, (unsigned int)length );
 
@@ -183,7 +184,7 @@
     {
 	rDebug("padding, _bx, finalSize = %i, %i, %i", padding, 
 		_bs, finalSize);
-	throw ERROR( "invalid padding size" );
+	throw RLOG_ERROR( "invalid padding size" );
     }
 
     // copy out the result..
@@ -200,7 +201,7 @@
     {
 	rDebug("checksum mismatch: expected %u, got %u", mac, mac2);
 	rDebug("on decode of %i bytes", finalSize);
-	throw ERROR( "checksum mismatch in filename decode" );
+	throw RLOG_ERROR( "checksum mismatch in filename decode" );
     }
 
     return finalSize;
diff -ru encfs-1.5.orig/encfs/CipherFileIO.cpp encfs-1.5/encfs/CipherFileIO.cpp
--- encfs-1.5.orig/encfs/CipherFileIO.cpp	2008-08-23 23:48:12.000000000 +0200
+++ encfs-1.5/encfs/CipherFileIO.cpp	2010-12-10 14:28:09.247590002 +0100
@@ -183,7 +183,7 @@
     off_t rawSize = base->getSize();
     if(rawSize >= HEADER_SIZE)
     {
-	rDebug("reading existing header, rawSize = %" PRIi64, rawSize);
+//	rDebug("reading existing header, rawSize = %" PRIi64, (long long int) rawSize);
 	// has a header.. read it
 	unsigned char buf[8] = {0};
 
@@ -231,7 +231,7 @@
 	} else
 	    rDebug("base not writable, IV not written..");
     }
-    rDebug("initHeader finished, fileIV = %" PRIu64 , fileIV);
+//    rDebug("initHeader finished, fileIV = %" PRIu64 , fileIV);
 }
 
 bool CipherFileIO::writeHeader( )
@@ -302,11 +302,11 @@
 	if(!ok)
 	{
 	    rDebug("decodeBlock failed for block %" PRIi64 ", size %i",
-		    blockNum, (int)readSize );
+		    (long long int)blockNum, (int)readSize );
 	    readSize = -1;
 	}
     } else
-	rDebug("readSize zero for offset %" PRIi64, req.offset);
+	rDebug("readSize zero for offset %" PRIi64, (long long int)req.offset);
 
     return readSize;
 }
@@ -343,7 +343,7 @@
     } else
     {
 	rDebug("encodeBlock failed for block %" PRIi64 ", size %i",
-		blockNum, req.dataLen);
+		(long long int)blockNum, req.dataLen);
 	ok = false;
     }
     return ok;
diff -ru encfs-1.5.orig/encfs/Cipher.h encfs-1.5/encfs/Cipher.h
--- encfs-1.5.orig/encfs/Cipher.h	2008-08-23 23:48:12.000000000 +0200
+++ encfs-1.5/encfs/Cipher.h	2010-12-09 13:44:20.021699590 +0100
@@ -81,6 +81,7 @@
     Cipher();
     virtual ~Cipher();
 
+#undef interface
     virtual rel::Interface interface() const =0;
 
     // create a new key based on a password
diff -ru encfs-1.5.orig/encfs/ConfigReader.cpp encfs-1.5/encfs/ConfigReader.cpp
--- encfs-1.5.orig/encfs/ConfigReader.cpp	2008-08-06 08:35:05.000000000 +0200
+++ encfs-1.5/encfs/ConfigReader.cpp	2010-12-10 10:10:49.047589930 +0100
@@ -25,6 +25,8 @@
 #include <unistd.h>
 #include <cstring>
 
+#include <pthread.h>
+
 
 using namespace std;
 using namespace rlog;
diff -ru encfs-1.5.orig/encfs/Context.h encfs-1.5/encfs/Context.h
--- encfs-1.5.orig/encfs/Context.h	2008-07-08 07:55:52.000000000 +0200
+++ encfs-1.5/encfs/Context.h	2010-12-08 21:25:48.758202000 +0100
@@ -28,6 +28,8 @@
 #include <map>
 #endif
 
+#include <pthread.h>
+
 using boost::shared_ptr;
 struct EncFS_Args;
 struct EncFS_Opts;
diff -ru encfs-1.5.orig/encfs/DirNode.cpp encfs-1.5/encfs/DirNode.cpp
--- encfs-1.5.orig/encfs/DirNode.cpp	2008-09-07 23:53:53.000000000 +0200
+++ encfs-1.5/encfs/DirNode.cpp	2010-12-13 14:31:57.829372629 +0100
@@ -562,19 +562,23 @@
     rLog( Info, "mkdir on %s", cyName.c_str() );
 
     // if uid or gid are set, then that should be the directory owner
+#if 0
     int olduid = -1;
     int oldgid = -1;
     if(uid != 0)
 	olduid = setfsuid( uid );
     if(gid != 0)
 	oldgid = setfsgid( gid );
+#endif
 
-    int res = ::mkdir( cyName.c_str(), mode );
+    int res = ::mkdir( cyName.c_str() );
 
+#if 0
     if(olduid >= 0)
 	setfsuid( olduid );
     if(oldgid >= 0)
 	setfsgid( oldgid );
+#endif
 
     if(res == -1)
     {
@@ -623,6 +627,7 @@
     try
     {
 	renameNode( fromPlaintext, toPlaintext );
+	toNode.reset();
 	res = ::rename( fromCName.c_str(), toCName.c_str() );
 
 	if(res == -1)
@@ -668,11 +673,14 @@
 	rLog(Info, "hard links not supported with external IV chaining!");
     } else
     {
+	res = -ENOSYS;
+#if 0
 	res = ::link( fromCName.c_str(), toCName.c_str() );
 	if(res == -1)
 	    res = -errno;
 	else
 	    res = 0;
+#endif
     }
 
     return res;
@@ -803,6 +811,7 @@
     Lock _lock( mutex );
    
     int res = 0;
+#if 0
     if(ctx && ctx->lookupNode( plaintextName ))
     {
 	// If FUSE is running with "hard_remove" option where it doesn't
@@ -812,6 +821,7 @@
 		"is probably in effect", cyName.c_str() );
 	res = -EBUSY;
     } else
+#endif
     {
 	string fullName = rootDir + cyName;
 	res = ::unlink( fullName.c_str() );
diff -ru encfs-1.5.orig/encfs/encfs.cpp encfs-1.5/encfs/encfs.cpp
--- encfs-1.5.orig/encfs/encfs.cpp	2008-08-06 08:36:13.000000000 +0200
+++ encfs-1.5/encfs/encfs.cpp	2010-12-13 14:25:54.299373003 +0100
@@ -23,7 +23,7 @@
 #include <fcntl.h>
 #include <dirent.h>
 #include <cerrno>
-#include <sys/statvfs.h>
+//#include <sys/statvfs.h>
 #include <sys/time.h>
 
 #include <sys/types.h>
@@ -158,6 +158,7 @@
 int _do_getattr(FileNode *fnode, struct stat *stbuf)
 {
     int res = fnode->getAttr(stbuf);
+#if 0
     if(res == ESUCCESS && S_ISLNK(stbuf->st_mode))
     {
 	EncFS_Context *ctx = context();
@@ -181,6 +182,7 @@
                 res = -errno;
 	}
     }
+#endif
 
     return res;
 }
@@ -366,6 +368,8 @@
     char *buf = data.get<0>();
     size_t size = data.get<1>();
 
+	return -EINVAL;
+#if 0
     int res = ESUCCESS;
     shared_ptr<DirNode> FSRoot = ctx->getRoot(&res);
     if(!FSRoot)
@@ -394,6 +398,7 @@
 	rWarning("Error decoding link");
 	return -1;
     }
+#endif
 }
 
 int encfs_readlink(const char *path, char *buf, size_t size)
@@ -406,6 +411,8 @@
 {
     EncFS_Context *ctx = context();
 
+	return -EIO;
+#if 0
     int res = -EIO;
     shared_ptr<DirNode> FSRoot = ctx->getRoot(&res);
     if(!FSRoot)
@@ -445,6 +452,7 @@
 	err.log( _RLWarningChannel );
     }
     return res;
+#endif
 }
 
 int encfs_link(const char *from, const char *to)
@@ -500,8 +508,11 @@
 int _do_chown(EncFS_Context *, const string &cyName, 
 	tuple<uid_t, gid_t> data)
 {
+#if 0
     int res = lchown( cyName.c_str(), data.get<0>(), data.get<1>() );
     return (res == -1) ? -errno : ESUCCESS;
+#endif
+	return ESUCCESS;
 }
 
 int encfs_chown(const char *path, uid_t uid, gid_t gid)
@@ -675,6 +686,7 @@
 {
     EncFS_Context *ctx = context();
 
+#if 0
     int res = -EIO;
     try
     {
@@ -697,6 +709,8 @@
 	err.log( _RLWarningChannel );
     }
     return res;
+#endif
+	return -EIO;
 }
 
 #ifdef HAVE_XATTR
diff -ru encfs-1.5.orig/encfs/encfs.h encfs-1.5/encfs/encfs.h
--- encfs-1.5.orig/encfs/encfs.h	2008-08-06 08:36:13.000000000 +0200
+++ encfs-1.5/encfs/encfs.h	2010-12-08 20:58:16.908202001 +0100
@@ -30,6 +30,7 @@
 #ifndef linux
 #include <cerrno>
 
+#if 0
 static __inline int setfsuid(uid_t uid)
 {
     uid_t olduid = geteuid();
@@ -54,6 +55,7 @@
     return oldgid;
 }
 #endif
+#endif
 
 int encfs_getattr(const char *path, struct stat *stbuf);
 int encfs_fgetattr(const char *path, struct stat *stbuf, 
diff -ru encfs-1.5.orig/encfs/FileNode.cpp encfs-1.5/encfs/FileNode.cpp
--- encfs-1.5.orig/encfs/FileNode.cpp	2008-08-06 08:36:13.000000000 +0200
+++ encfs-1.5/encfs/FileNode.cpp	2010-12-13 14:25:06.829373000 +0100
@@ -180,6 +180,7 @@
     Lock _lock( mutex );
 
     int res;
+#if 0
     int olduid = -1;
     int oldgid = -1;
     if(uid != 0)
@@ -200,25 +201,37 @@
             return -EPERM;
         }
     }
+#endif
 
     /*
      * cf. xmp_mknod() in fusexmp.c
      * The regular file stuff could be stripped off if there
      * were a create method (advised to have)
      */
-    if (S_ISREG( mode )) {
+printf("mknod %o\n", mode);
+    if (S_ISREG( mode ) || !(mode & _S_IFMT)) {
+	printf("open name %s\n", _cname.c_str());
         res = ::open( _cname.c_str(), O_CREAT | O_EXCL | O_WRONLY, mode );
         if (res >= 0)
             res = ::close( res );
+#if 0
     } else if (S_ISFIFO( mode ))
         res = ::mkfifo( _cname.c_str(), mode );
     else
         res = ::mknod( _cname.c_str(), mode, rdev );
+#else
+   } else {
+	errno = ENOSYS;
+	res = -1;
+   }
+#endif
 
+#if 0
     if(olduid >= 0)
 	setfsuid( olduid );
     if(oldgid >= 0)
 	setfsgid( oldgid );
+#endif
 
     if(res == -1)
     {
@@ -269,7 +282,7 @@
 bool FileNode::write(off_t offset, unsigned char *data, ssize_t size)
 {
     rLog(Info, "FileNode::write offset %" PRIi64 ", data size %i",
-	    offset, (int)size);
+	    (long long int) offset, (int)size);
 
     IORequest req;
     req.offset = offset;
diff -ru encfs-1.5.orig/encfs/FileNode.h encfs-1.5/encfs/FileNode.h
--- encfs-1.5.orig/encfs/FileNode.h	2008-08-06 08:36:13.000000000 +0200
+++ encfs-1.5/encfs/FileNode.h	2010-12-13 14:27:12.889372935 +0100
@@ -25,6 +25,8 @@
 #include <sys/types.h>
 #include <string>
 
+#include <pthread.h>
+
 class Cipher;
 class FileIO;
 class DirNode;
diff -ru encfs-1.5.orig/encfs/FileUtils.cpp encfs-1.5/encfs/FileUtils.cpp
--- encfs-1.5.orig/encfs/FileUtils.cpp	2008-09-10 07:53:58.000000000 +0200
+++ encfs-1.5/encfs/FileUtils.cpp	2010-12-13 14:53:20.569373003 +0100
@@ -42,8 +42,8 @@
 
 #include <sys/types.h>
 #include <sys/stat.h>
-#include <sys/socket.h>
-#include <sys/wait.h>
+//#include <sys/socket.h>
+//#include <sys/wait.h>
 #include <fcntl.h>
 #include <unistd.h>
 #include <cctype>
@@ -259,7 +259,7 @@
 
 bool isAbsolutePath( const char *fileName )
 {
-    if(fileName && fileName[0] != '\0' && fileName[0] == '/')
+    if(fileName && fileName[0] != '\0' && isalpha((unsigned char) fileName[0]) && fileName[1] == ':')
 	return true;
     else
 	return false;
@@ -1136,8 +1136,6 @@
     rDebug( "useStdin: %i", useStdin );
     if(useStdin)
 	userKey = config.getUserKey( useStdin );
-    else if(!passwordProgram.empty())
-	userKey = config.getUserKey( passwordProgram, rootDir );
     else
 	userKey = config.getNewUserKey();
 
@@ -1436,6 +1434,7 @@
     return result;
 }
 
+#if 0
 CipherKey EncFSConfig::getUserKey( const std::string &passProg,
         const std::string &rootDir )
 {
@@ -1515,6 +1514,7 @@
 
     return result;
 }
+#endif
 
 CipherKey EncFSConfig::getNewUserKey()
 {
@@ -1582,12 +1582,8 @@
 	// get user key
 	CipherKey userKey;
 
-        if(opts->passwordProgram.empty())
-        {
-            rDebug( "useStdin: %i", opts->useStdin );
-            userKey = config.getUserKey( opts->useStdin );
-        } else
-            userKey = config.getUserKey( opts->passwordProgram, opts->rootDir );
+        rDebug( "useStdin: %i", opts->useStdin );
+        userKey = config.getUserKey( opts->useStdin );
 
 	if(!userKey)
 	    return rootInfo;
diff -ru encfs-1.5.orig/encfs/FileUtils.h encfs-1.5/encfs/FileUtils.h
--- encfs-1.5.orig/encfs/FileUtils.h	2008-08-23 23:48:12.000000000 +0200
+++ encfs-1.5/encfs/FileUtils.h	2010-12-09 10:18:25.691700045 +0100
@@ -95,8 +95,6 @@
     }
 
     CipherKey getUserKey(bool useStdin);
-    CipherKey getUserKey(const std::string &passwordProgram,
-                         const std::string &rootDir);
     CipherKey getNewUserKey();
     
     shared_ptr<Cipher> getCipher() const;
diff -ru encfs-1.5.orig/encfs/MACFileIO.cpp encfs-1.5/encfs/MACFileIO.cpp
--- encfs-1.5.orig/encfs/MACFileIO.cpp	2008-08-23 23:48:12.000000000 +0200
+++ encfs-1.5/encfs/MACFileIO.cpp	2010-12-13 14:34:56.749375498 +0100
@@ -71,6 +71,7 @@
 {
 }
 
+#undef interface
 rel::Interface MACFileIO::interface() const
 {
     return MACFileIO_iface;
@@ -219,7 +220,7 @@
                     if( !warnOnly )
                     {
                         MemoryPool::release( mb );
-                        throw ERROR(
+                        throw RLOG_ERROR(
                                 _("MAC comparison failure, refusing to read"));
                     }
                     break;
diff -ru encfs-1.5.orig/encfs/MACFileIO.h encfs-1.5/encfs/MACFileIO.h
--- encfs-1.5.orig/encfs/MACFileIO.h	2008-08-06 08:36:13.000000000 +0200
+++ encfs-1.5/encfs/MACFileIO.h	2010-12-13 14:17:28.839373303 +0100
@@ -54,7 +54,6 @@
     virtual bool isWritable() const;
 
     virtual void allowHoles( bool allow );
-
 private:
     virtual ssize_t readOneBlock( const IORequest &req ) const;
     virtual bool writeOneBlock( const IORequest &req );
diff -ru encfs-1.5.orig/encfs/main.cpp encfs-1.5/encfs/main.cpp
--- encfs-1.5.orig/encfs/main.cpp	2008-08-06 08:36:13.000000000 +0200
+++ encfs-1.5/encfs/main.cpp	2010-12-13 14:28:06.629373090 +0100
@@ -39,7 +39,7 @@
 #include <rlog/rlog.h>
 #include <rlog/Error.h>
 #include <rlog/RLogChannel.h>
-#include <rlog/SyslogNode.h>
+#include <rlog/rloglocation.h>
 #include <rlog/StdioNode.h>
 
 #include "ConfigReader.h"
@@ -53,8 +53,8 @@
 
 // Fuse version >= 26 requires another argument to fuse_unmount, which we
 // don't have.  So use the backward compatible call instead..
-extern "C" void fuse_unmount_compat22(const char *mountpoint);
-#    define fuse_unmount fuse_unmount_compat22
+//extern "C" void fuse_unmount_compat22(const char *mountpoint);
+//#    define fuse_unmount fuse_unmount_compat22
 
 #include <locale.h>
 
@@ -219,8 +219,6 @@
 	{"anykey", 0, 0, 'k'}, // skip key checks
 	{"no-default-flags", 0, 0, 'N'}, // don't use default fuse flags
 	{"ondemand", 0, 0, 'm'}, // mount on-demand
-	{"public", 0, 0, 'P'}, // public mode
-	{"extpass", 1, 0, 'p'}, // external password program
 	// {"single-thread", 0, 0, 's'}, // single-threaded mode
 	{"stdinpass", 0, 0, 'S'}, // read password from stdin
 	{"verbose", 0, 0, 'v'}, // verbose mode
@@ -289,21 +287,6 @@
 	    PUSHARG("-o");
 	    PUSHARG( optarg );
 	    break;
-	case 'p':
-	    out->opts->passwordProgram.assign( optarg );
-	    break;
-	case 'P':
-	    if(geteuid() != 0)
-		rWarning(_("option '--public' ignored for non-root user"));
-	    else
-	    {
-		out->opts->ownerCreate = true;
-		// add 'allow_other' option
-		// add 'default_permissions' option (default)
-		PUSHARG("-o");
-		PUSHARG("allow_other");
-	    }
-	    break;
 	case 'V':
 	    // xgroup(usage)
 	    cerr << autosprintf(_("encfs version %s"), VERSION) << endl;
@@ -474,8 +457,12 @@
     }
 }
 
+void init_mpool_mutex();
+
 int main(int argc, char *argv[])
 {
+    init_mpool_mutex();
+
     // initialize the logging library
     RLogInit( argc, argv );
 
@@ -487,7 +474,7 @@
 
     // log to stderr by default..
     scoped_ptr<StdioNode> slog( new StdioNode( STDERR_FILENO ) );
-    scoped_ptr<SyslogNode> logNode;
+    scoped_ptr<rlog::FileNode> logNode;
 
     // show error and warning output
     slog->subscribeTo( GetGlobalChannel("error") );
@@ -594,9 +581,9 @@
 	if(encfsArgs->isDaemon)
 	{
 	    // switch to logging just warning and error messages via syslog
-	    logNode.reset( new SyslogNode( "encfs" ) );
-	    logNode->subscribeTo( GetGlobalChannel("warning") );
-	    logNode->subscribeTo( GetGlobalChannel("error") );
+	    logNode.reset( new rlog::FileNode( "encfs", "c:\\encfs.txt" ) );
+//	    logNode->subscribeTo( GetGlobalChannel("warning") );
+//	    logNode->subscribeTo( GetGlobalChannel("error") );
 
 	    // disable stderr reporting..
 	    slog.reset();
@@ -735,7 +722,7 @@
 	// xgroup(diag)
 	rWarning(_("Unmounting filesystem %s due to inactivity"),
 		arg->mountPoint.c_str());
-	fuse_unmount( arg->mountPoint.c_str() );
+	fuse_unmount( arg->mountPoint.c_str(), NULL );
 	return true;
     }
 }
diff -ru encfs-1.5.orig/encfs/Makefile.am encfs-1.5/encfs/Makefile.am
--- encfs-1.5.orig/encfs/Makefile.am	2008-08-23 23:48:12.000000000 +0200
+++ encfs-1.5/encfs/Makefile.am	2010-12-13 14:57:16.089375000 +0100
@@ -45,12 +45,12 @@
 libencfs_la_LDFLAGS = -version-info 5:0:1
 libencfs_la_LIBADD = -lrlog
 
-EXTRASRC = ../intl/autosprintf.cpp
-if BUILD_OPENSSL
-if BUILD_SSLCIPHER
+EXTRASRC = ../intl/autosprintf.cpp vasprintf.c
+#if BUILD_OPENSSL
+#if BUILD_SSLCIPHER
 EXTRASRC += SSL_Cipher.cpp
-endif
-endif
+#endif
+#endif
 
 libencfs_la_SOURCES = \
     readpassphrase.cpp \
@@ -76,6 +76,7 @@
     FileNode.cpp \
     FileUtils.cpp \
     openssl.cpp \
+    compatwin.cpp \
     ${EXTRASRC}
 
 
diff -ru encfs-1.5.orig/encfs/Makefile.in encfs-1.5/encfs/Makefile.in
--- encfs-1.5.orig/encfs/Makefile.in	2008-09-10 07:55:07.000000000 +0200
+++ encfs-1.5/encfs/Makefile.in	2010-12-13 14:44:46.949371568 +0100
@@ -75,21 +75,21 @@
 LTLIBRARIES = $(lib_LTLIBRARIES)
 libencfs_la_DEPENDENCIES =
 am__libencfs_la_SOURCES_DIST = readpassphrase.cpp base64.cpp \
-	ConfigReader.cpp ConfigVar.cpp Context.cpp Cipher.cpp \
+	ConfigReader.cpp compatwin.cpp ConfigVar.cpp Context.cpp Cipher.cpp \
 	CipherKey.cpp FileIO.cpp RawFileIO.cpp BlockFileIO.cpp \
 	CipherFileIO.cpp MACFileIO.cpp NameIO.cpp StreamNameIO.cpp \
 	BlockNameIO.cpp NullNameIO.cpp Interface.cpp MemoryPool.cpp \
 	NullCipher.cpp DirNode.cpp FileNode.cpp FileUtils.cpp \
-	openssl.cpp ../intl/autosprintf.cpp SSL_Cipher.cpp
+	openssl.cpp ../intl/autosprintf.cpp vasprintf.c SSL_Cipher.cpp
 @BUILD_OPENSSL_TRUE@@BUILD_SSLCIPHER_TRUE@am__objects_1 =  \
 @BUILD_OPENSSL_TRUE@@BUILD_SSLCIPHER_TRUE@	SSL_Cipher.lo
-am__objects_2 = autosprintf.lo $(am__objects_1)
+am__objects_2 = autosprintf.lo vasprintf.lo $(am__objects_1)
 am_libencfs_la_OBJECTS = readpassphrase.lo base64.lo ConfigReader.lo \
 	ConfigVar.lo Context.lo Cipher.lo CipherKey.lo FileIO.lo \
 	RawFileIO.lo BlockFileIO.lo CipherFileIO.lo MACFileIO.lo \
 	NameIO.lo StreamNameIO.lo BlockNameIO.lo NullNameIO.lo \
 	Interface.lo MemoryPool.lo NullCipher.lo DirNode.lo \
-	FileNode.lo FileUtils.lo openssl.lo $(am__objects_2)
+	FileNode.lo FileUtils.lo openssl.lo $(am__objects_2) compatwin.lo
 libencfs_la_OBJECTS = $(am_libencfs_la_OBJECTS)
 libencfs_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
@@ -320,11 +320,12 @@
 #
 libencfs_la_LDFLAGS = -version-info 5:0:1
 libencfs_la_LIBADD = -lrlog
-EXTRASRC = ../intl/autosprintf.cpp $(am__append_3)
+EXTRASRC = ../intl/autosprintf.cpp vasprintf.c $(am__append_3)
 libencfs_la_SOURCES = \
     readpassphrase.cpp \
     base64.cpp \
     ConfigReader.cpp \
+    compatwin.cpp \
     ConfigVar.cpp \
     Context.cpp \
     Cipher.cpp \
diff -ru encfs-1.5.orig/encfs/MemoryPool.cpp encfs-1.5/encfs/MemoryPool.cpp
--- encfs-1.5.orig/encfs/MemoryPool.cpp	2008-08-06 08:35:05.000000000 +0200
+++ encfs-1.5/encfs/MemoryPool.cpp	2010-12-09 13:16:33.941699296 +0100
@@ -64,10 +64,13 @@
     delete el;
 }
 
-static pthread_mutex_t gMPoolMutex = PTHREAD_MUTEX_INITIALIZER;
+static pthread_mutex_t gMPoolMutex;
 static BlockList *gMemPool = NULL;
 
-
+void init_mpool_mutex()
+{
+	pthread_mutex_init(&gMPoolMutex, 0);
+}
 
 MemBlock MemoryPool::allocate( int size )
 {
diff -ru encfs-1.5.orig/encfs/NameIO.h encfs-1.5/encfs/NameIO.h
--- encfs-1.5.orig/encfs/NameIO.h	2008-07-08 07:55:50.000000000 +0200
+++ encfs-1.5/encfs/NameIO.h	2010-12-08 21:18:57.738202001 +0100
@@ -26,6 +26,7 @@
 #include "Interface.h"
 #include "CipherKey.h"
 
+#undef interface
 using boost::shared_ptr;
 class Cipher;
 
diff -ru encfs-1.5.orig/encfs/openssl.cpp encfs-1.5/encfs/openssl.cpp
--- encfs-1.5.orig/encfs/openssl.cpp	2008-07-08 07:55:50.000000000 +0200
+++ encfs-1.5/encfs/openssl.cpp	2010-12-08 21:36:20.038202002 +0100
@@ -33,7 +33,8 @@
 
 unsigned long pthreads_thread_id()
 {
-    return (unsigned long)pthread_self();
+	return GetCurrentThreadId();
+//    return (unsigned long)pthread_self();
 }
 
 static pthread_mutex_t *crypto_locks = NULL;
diff -ru encfs-1.5.orig/encfs/Range.h encfs-1.5/encfs/Range.h
--- encfs-1.5.orig/encfs/Range.h	2008-07-08 07:55:52.000000000 +0200
+++ encfs-1.5/encfs/Range.h	2010-12-09 13:43:45.461700060 +0100
@@ -18,6 +18,8 @@
 #ifndef _Range_incl_
 #define _Range_incl_
 
+#undef min
+#undef max
 
 class Range
 {
diff -ru encfs-1.5.orig/encfs/RawFileIO.cpp encfs-1.5/encfs/RawFileIO.cpp
--- encfs-1.5.orig/encfs/RawFileIO.cpp	2008-08-06 08:35:05.000000000 +0200
+++ encfs-1.5/encfs/RawFileIO.cpp	2010-12-13 14:16:33.429373914 +0100
@@ -31,6 +31,8 @@
 
 #include <cerrno>
 
+#include <pthread.h>
+
 using namespace std;
 
 static rel::Interface RawFileIO_iface("FileIO/Raw", 1, 0, 0);
@@ -80,8 +82,10 @@
     
     if( _fd != -1 )
 	close( _fd );
+rDebug("closed raw %s", name.c_str());
 }
 
+#undef interface
 rel::Interface RawFileIO::interface() const
 {
     return RawFileIO_iface;
@@ -103,7 +107,7 @@
     {
 	// make sure user has read/write permission..
 	chmod( path , stbuf.st_mode | 0600 );
-	fd = ::open( path , flags );
+	fd = ::my_open( path , flags );
 	chmod( path , stbuf.st_mode );
     } else
     {
@@ -146,7 +150,8 @@
 #warning O_LARGEFILE not supported
 #endif
 
-	int newFd = ::open( name.c_str(), finalFlags );
+	int newFd = ::my_open( name.c_str(), finalFlags );
+rDebug("opened raw %s", name.c_str());
 	
 	rDebug("open file with flags %i, result = %i", finalFlags, newFd);
 
@@ -233,7 +238,7 @@
     if(readSize < 0)
     {
 	rInfo("read failed at offset %" PRIi64 " for %i bytes: %s",
-		req.offset, req.dataLen, strerror( errno ));
+		(long long int) req.offset, req.dataLen, strerror( errno ));
     }
 
     return readSize;
@@ -257,7 +262,7 @@
 	{
 	    knownSize = false;
 	    rInfo("write failed at offset %" PRIi64 " for %i bytes: %s",
-		    offset, (int)bytes, strerror( errno ));
+		    (long long int) offset, (int)bytes, strerror( errno ));
 	    return false;
 	}
 	    
@@ -303,7 +308,7 @@
     {
 	int eno = errno;
 	rInfo("truncate failed for %s (%i) size %" PRIi64 ", error %s",
-		name.c_str(), fd, size, strerror(eno));
+		name.c_str(), fd, (long long int) size, strerror(eno));
 	res = -eno;
 	knownSize = false;
     } else
diff -ru encfs-1.5.orig/encfs/readpassphrase.cpp encfs-1.5/encfs/readpassphrase.cpp
--- encfs-1.5.orig/encfs/readpassphrase.cpp	2008-08-06 08:35:05.000000000 +0200
+++ encfs-1.5/encfs/readpassphrase.cpp	2010-12-09 10:24:19.741700142 +0100
@@ -42,154 +42,46 @@
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <unistd.h>
-#include <paths.h>
 #include <cstring>
 #include <cctype>
 
-#include <termios.h>
 #include <readpassphrase.h>
 
-#ifdef TCSASOFT
-# define _T_FLUSH	(TCSAFLUSH|TCSASOFT)
-#else
-# define _T_FLUSH	(TCSAFLUSH)
-#endif
-
-/* SunOS 4.x which lacks _POSIX_VDISABLE, but has VDISABLE */
-#if !defined(_POSIX_VDISABLE) && defined(VDISABLE)
-#  define _POSIX_VDISABLE       VDISABLE
-#endif
-
-static volatile sig_atomic_t signo;
-
-static void handler(int);
-
 char *
 readpassphrase(const char *prompt, char *buf, size_t bufsiz, int flags)
 {
-	ssize_t nr;
-	int input, output, save_errno;
-	char ch, *p, *end;
-	struct termios term, oterm;
-	struct sigaction sa, saveint, savehup, savequit, saveterm;
-	struct sigaction savetstp, savettin, savettou;
-
-	/* I suppose we could alloc on demand in this case (XXX). */
-	if (bufsiz == 0) {
-		errno = EINVAL;
-		return(NULL);
-	}
-
-restart:
-	/*
-	 * Read and write to /dev/tty if available.  If not, read from
-	 * stdin and write to stderr unless a tty is required.
-	 */
-	if ((input = output = open(_PATH_TTY, O_RDWR)) == -1) {
-		if (flags & RPP_REQUIRE_TTY) {
-			errno = ENOTTY;
-			return(NULL);
-		}
-		input = STDIN_FILENO;
-		output = STDERR_FILENO;
-	}
-
-	/*
-	 * Catch signals that would otherwise cause the user to end
-	 * up with echo turned off in the shell.  Don't worry about
-	 * things like SIGALRM and SIGPIPE for now.
-	 */
-	sigemptyset(&sa.sa_mask);
-	sa.sa_flags = 0;		/* don't restart system calls */
-	sa.sa_handler = handler;
-	(void)sigaction(SIGINT, &sa, &saveint);
-	(void)sigaction(SIGHUP, &sa, &savehup);
-	(void)sigaction(SIGQUIT, &sa, &savequit);
-	(void)sigaction(SIGTERM, &sa, &saveterm);
-	(void)sigaction(SIGTSTP, &sa, &savetstp);
-	(void)sigaction(SIGTTIN, &sa, &savettin);
-	(void)sigaction(SIGTTOU, &sa, &savettou);
-
-	/* Turn off echo if possible. */
-	if (tcgetattr(input, &oterm) == 0) {
-		memcpy(&term, &oterm, sizeof(term));
-		if (!(flags & RPP_ECHO_ON))
-			term.c_lflag &= ~(ECHO | ECHONL);
-#ifdef VSTATUS
-		if (term.c_cc[VSTATUS] != _POSIX_VDISABLE)
-			term.c_cc[VSTATUS] = _POSIX_VDISABLE;
-#endif
-		(void)tcsetattr(input, _T_FLUSH, &term);
-	} else {
-		memset(&term, 0, sizeof(term));
-		memset(&oterm, 0, sizeof(oterm));
-	}
-
-	(void)write(output, prompt, strlen(prompt));
-	end = buf + bufsiz - 1;
-	for (p = buf; (nr = read(input, &ch, 1)) == 1 && ch != '\n' && ch != '\r';) {
-		if (p < end) {
-			if ((flags & RPP_SEVENBIT))
-				ch &= 0x7f;
-			if (isalpha(ch)) {
-				if ((flags & RPP_FORCELOWER))
-					ch = tolower(ch);
-				if ((flags & RPP_FORCEUPPER))
-					ch = toupper(ch);
-			}
-			*p++ = ch;
-		}
-	}
-	*p = '\0';
-	save_errno = errno;
-	if (!(term.c_lflag & ECHO))
-		(void)write(output, "\n", 1);
-
-	/* Restore old terminal settings and signals. */
-	if (memcmp(&term, &oterm, sizeof(term)) != 0)
-		(void)tcsetattr(input, _T_FLUSH, &oterm);
-	(void)sigaction(SIGINT, &saveint, NULL);
-	(void)sigaction(SIGHUP, &savehup, NULL);
-	(void)sigaction(SIGQUIT, &savequit, NULL);
-	(void)sigaction(SIGTERM, &saveterm, NULL);
-	(void)sigaction(SIGTSTP, &savetstp, NULL);
-	(void)sigaction(SIGTTIN, &savettin, NULL);
-	(void)sigaction(SIGTTOU, &savettou, NULL);
-	if (input != STDIN_FILENO)
-		(void)close(input);
-
-	/*
-	 * If we were interrupted by a signal, resend it to ourselves
-	 * now that we have restored the signal handlers.
-	 */
-	if (signo) {
-		kill(getpid(), signo); 
-		switch (signo) {
-		case SIGTSTP:
-		case SIGTTIN:
-		case SIGTTOU:
-			signo = 0;
-			goto restart;
-		}
-	}
+        int save_errno, ch;
+        char *p, *end;
 
-	errno = save_errno;
-	return(nr == -1 ? NULL : buf);
+        /* I suppose we could alloc on demand in this case (XXX). */
+        if (bufsiz == 0) {
+                errno = EINVAL;
+                return(NULL);
+        }
+
+        printf("%s", prompt);
+        fflush(stdout);
+        end = buf + bufsiz - 1;
+        for (p = buf; (ch = getchar()) != EOF && ch != '\n' && ch != '\r';) {
+                if (p < end) {
+                        ch &= 0xff;
+                        if ((flags & RPP_SEVENBIT))
+                                ch &= 0x7f;
+                        if (isalpha(ch)) {
+                                if ((flags & RPP_FORCELOWER))
+                                        ch = tolower(ch);
+                                if ((flags & RPP_FORCEUPPER))
+                                        ch = toupper(ch);
+                        }
+                        *p++ = ch;
+                }
+        }
+        *p = '\0';
+        save_errno = errno;
+        printf("\n");
+        errno = save_errno;
+        return (ch == EOF ? NULL : buf);
 }
-#endif /* HAVE_READPASSPHRASE */
-  
-#if 0
-char *
-getpass(const char *prompt)
-{
-	static char buf[_PASSWORD_LEN + 1];
 
-	return(readpassphrase(prompt, buf, sizeof(buf), RPP_ECHO_OFF));
-}
 #endif
 
-static void handler(int s)
-{
-
-	signo = s;
-}
diff -ru encfs-1.5.orig/encfs/SSL_Cipher.cpp encfs-1.5/encfs/SSL_Cipher.cpp
--- encfs-1.5.orig/encfs/SSL_Cipher.cpp	2008-08-23 23:48:12.000000000 +0200
+++ encfs-1.5/encfs/SSL_Cipher.cpp	2010-12-13 14:29:38.639373805 +0100
@@ -34,12 +34,14 @@
 #include <cstring>
 #include <ctime>
 
-#include <sys/mman.h>
+//#include <sys/mman.h>
 #include <sys/time.h>
 
 #include <rlog/rlog.h>
 #include <rlog/Error.h>
 
+#include <pthread.h>
+
 #include "i18n.h"
 
 using namespace std;
diff -ru encfs-1.5.orig/encfs/test.cpp encfs-1.5/encfs/test.cpp
--- encfs-1.5.orig/encfs/test.cpp	2008-08-23 23:48:12.000000000 +0200
+++ encfs-1.5/encfs/test.cpp	2010-12-09 15:25:01.311700026 +0100
@@ -436,8 +436,12 @@
 }
 
 
+void init_mpool_mutex();
+
 int main(int argc, char *argv[])
 {
+    init_mpool_mutex();
+
     RLogInit( argc, argv );
 
     StdioNode stdLog( STDERR_FILENO );
diff -ru encfs-1.5.orig/intl/autosprintf.cpp encfs-1.5/intl/autosprintf.cpp
--- encfs-1.5.orig/intl/autosprintf.cpp	2008-09-07 23:41:36.000000000 +0200
+++ encfs-1.5/intl/autosprintf.cpp	2010-12-09 14:04:11.471699995 +0100
@@ -33,6 +33,9 @@
 //#include "lib-asprintf.h"
 #include <stdio.h>
 
+extern "C" int vasprintf(char **ret, const char *fmt, va_list ap);
+
+
 namespace gnu
 {
 
